<Application x:Class="WPF_Layout.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:WPF_Layout"
             StartupUri="SimpleCanvas.xaml">
             <!--
    WPF布局原则

    WPF窗口只能包含单个元素。为在WPF窗口中放置多个元素并创建更贴近实用的用户界面，需要在窗口上放置一个容器，然后在这个容器中添加其他元素
    (造成这一限制的原因是Window类继承自ContentControl类)

    在WPF中，布局由您使用的容器来确定。尽管有多个容器可供选择，但“理想的”WPF窗口需要遵循以下几条重要原则：
    a.不应显式设定元素(如控件)的尺寸。
    元素应当可以改变尺寸以适合他们的内容。例如，当添加更多的文本时按钮应当能够扩展。可通过设置最大和最小尺寸来限制可以接受的控件尺寸范围
    b.不应使用屏幕坐标指定元素的位置。
    元素应当由他们的容器根据他们的尺寸、顺序以及(可选的)其他特定于具体布局容器的信息进行排列。如果需要在元素之间添加空白空间，可使用Margin属性
    (以硬编码方式设定尺寸和位置是极其不当的处理方式，因为这会限制本地化界面的能力，并且会使界面更难处理动态内容)
    c.布局容器的子元素"共享"可用的空间。
    如果空间允许，布局容器会根据每个元素的内容尽可能为元素设置更合理的尺寸。他们还会向一个或多个子元素分配多余的空间
    d.可嵌套的布局容器。
    典型的用户界面使用Grid面板作为开始，Grid面板是WPF中功能最强大的容器，Grid面板可包含其他布局容器，包含的这些容器以更小的分组排列元素，比如带有
    标题的文本框、列表框中的项、工具栏上的图标以及一列按钮等

    (尽管对于这几条原则而言也有一些例外，但他们反映了WPF的总体设计目标)

    
    
    
    
    
    
    布局过程
    
    WPF布局包括两个阶段：测量(measure)阶段和排列(arrange)阶段。在测量阶段，容器遍历所有子元素，并询问子元素他们所期望的尺寸。在排列阶段，容器在合适的
    位置放置子元素。
    
    当然，元素未必总能得到最合适的尺寸——有时容器没有足够大的空间以适应所含的元素。在这种情况下，容器为了适应可视化区域的尺寸，就必须剪裁不能满足要求的
    元素。在后面可以看到，通常可通过设置最小窗口尺寸来避免这种情况

    注意：布局容器不能提供任何滚动支持。相反，滚动是由特定的内容控件——ScrollViewer——提供的，ScrollViewer控件几乎可用于任何地方
    
    
    

    
    
    
    
    
    
    
    
    
    布局容器
    
    所有WPF布局容器都是派生自System.Windows.Controls.Panel抽象类的面板。Panel类添加了少量成员，包括三个公有属性
    
    DispatcherObject(抽象类)

    DependencyObject

    Visual(抽象类)

    UIElement
    
    FrameworkElement

    Panel(抽象类)

    

    
    
    
    
    Panel类的公有属性

    Background                        该属性是用于为面板背景着色的画刷。如果想接收鼠标事件，就必须将该属性设置为非空值(如果想接收鼠标事件，
                                       又不希望显示固定颜色的背景，那么只需要将背景色设置为透明即可)

    Children                          该属性是在面板中存储的条目集合。这是第一级条目——换句话说，这些条目自身也可以包含更多的条目

    IsItemsHost                       该属性是一个布尔值，如果面板用于显示与ItemsControl控件关联的项(例如，TreeView控件中的节点或列表框中的列表项)，
                                      该属性值为true。在大多数情况下，甚至不需要知道列表控件使用后台面板来管理他所包含的条目的布局。但如果希望创建
                                      自定义的列表，以不同方式放置子元素(例如，以平铺方式显示图像的ListBox控件)，该细节就变得很重要了
    
    注意：Panel类还包含几个内部属性，如果希望创建自己的容器，就可以使用他们。最特别的是，可重写继承自FrameworkElement类的MeasureOverride()和
    ArrangeOverride()方法，以修改当组织子元素时面板处理测量阶段和排列阶段的方式
    
    就Panel基类本身而言没有什么特别的，但他是其他更多特殊类的起点。WPF提供了大量可用于安排布局的继承自Panel的类。与所有WPF控件和大多数可视化元素
    一样，这些类位于System.Windows.Controls命名空间中


    

    
    
    
    
    
    核心布局面板

    StackPanel               在水平或垂直的堆栈中放置元素。这个布局容器通常用于更大、更复杂窗口中的一些小区域

    WrapPanel                在一系列可换行的行中放置元素。在水平方向上，WrapPanel面板从左向右放置条目，然后在随后的行中放置元素。在垂直方向上，
                             WrapPanel面板在自上而下的列中放置元素，并使用附加的列放置剩余的条目

    DockPanel                根据容器的整个边界调整元素

    Grid                     根据不可见的表格在行和列中排列元素，这是最灵活、最常用的容器之一

    UniformGrid              在不可见但是强制所有单元格具有相同尺寸的表中放置元素，这个布局容器不常用

    Canvas                   使用固定坐标绝对定位元素。这个布局容器与传统Windows窗体应用程序最相似，但没有提供锚定或停靠功能。因此，对于尺寸可变的窗口，
                             该布局容器不是合适的选择。如果选择的话，需要另外做一些工作
    

    
    更专业的布局模板

    TabPanel                 面板中包含多个选项卡

    ToolbarPanel             工具栏中的多个按钮

    ToolbarOverflowPanel     Toolbar控件的溢出菜单中的多个命令
    
    VirtualizingStackPanel   数据绑定列表控件使用该面板以大幅降低开销

    InkCanvas                和Canvas控件类似，但该控件支持处理平板电脑(TabletPC)上的手写笔(stylus)输入

    
    
    
    
    
    
    布局属性
    (尽管布局由容器决定，但子元素仍有一定的决定权。实际上，布局面板支持一小组布局属性，以便与子元素结合使用)

    HorizontalAlignment                     当水平方向上有额外的空间时，该属性决定了子元素在布局容器中如何定位。可选用
                                            Center、Left、Right或Stretch等属性值

    VerticalAlignment                       当垂直方向上有额外的空间时，该属性决定了子元素在布局容器中如何定位。可选用
                                            Center、Top、Bottom或Stretch等属性值

    Margin                                  该属性用于在元素的周围添加一定的空间。Margin属性是System.Windows.Thickness结构的一个实例，
                                            该结构具有分别用于为顶部、底部、左边和右边添加空间的独立组件

    MinWidth和MinHeight                     这两个属性用于设置元素的最小尺寸。如果一个元素对于其他布局容器来说太大，该元素将被剪裁以适合容器

    MaxWidth和MaxHeight                     这两个属性用于设置元素的最大尺寸。如果有更多可以使用的空间，那么在扩展子元素时就不会超出这一限制，
                                            即使将HorizontalAlignment和VerticalAlignment属性设置为Stretch也同样如此

    Width和Height                           这两个属性用于显式地设置元素的尺寸。这一设置会重写为HorizontalAlignment和VerticalAlignment属性
                                            设置的Stretch值。但不能超出MinWidth、MinHeight、MaxWidth和MaxHeight属性设置的范围

    
    所有这些属性都从FrameworkElement基类继承而来，所以在WPF窗口中可使用的所有图形小组件都支持这些属性
    (注意，不同的布局容器可以为他们的子元素提供附加属性。例如，Grid对象的所有子元素可以获得Row和Column属性，以便选择容纳他们的单元格，通过附加属性
    可为特定的布局容器设置其特有的信息。然而，上面列出的布局属性是可以应用于许多布局面板的通用属性。因此，这些属性被定义为FrameworkElement基类的一部分)
    (注意，上面没有列出的属性一样重要，如果查找熟悉的与位置相关的属性，例如Top属性、Right属性以及Location属性，是不会找到他们的。这是因为大多数布局容器
    (Canvas控件除外)都使用自动布局，并未提供显式定位元素的能够力

    
    
    
    当为窗口选择布局容器时，不仅关心能否得到正确的布局行为——还希望构建便于在未来维护和增强的布局结构。一条正确的经验法则是，对于一次性的布局任务，例如
    排列一组按钮，使用更小的布局容器(如StackPanel)。但如果需要为窗口中的多个区域使用一致的结构，对于标准化布局而言，Grid面板是必不可少的工具
    
    -->
    <Application.Resources>
         
    </Application.Resources>
</Application>
