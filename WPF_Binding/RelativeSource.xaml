<Window x:Class="WPF_Binding.RelativeSource"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPF_Binding"
        mc:Ignorable="d"
        Title="RelativeSource" Height="900" Width="400">
        <!--
    RelativeSource属性

    可根据相对于目标对象的关系指向源对象。例如，可使用RelativeSource属性将元素绑定到自身或其父元素(不知道在元素树中从当前元素到绑定的父元素之间有多少代)

    为设置Binding.RelativeSource属性，需要使用RelativeSource对象。这会使语法变得更加复杂，因为除了需要创建Binding对象外，还需要在其中创建嵌套的RelativeSource
    对象。
    
    
    举例：RelativeSource对象使用FindAncestor模式，该模式告知查找元素树直到发现AncestorType属性定义的元素类型
    <TextBlock>
        <TextBlock.Text>
            <Binding Path="Title">
                <Binding.RelativeSource>
                    <RelativeSource Mode="FindAncestor" AncestorType="{x:Type Window}"/>
                </Binding.RelativeSource>
            </Binding>
        </TextBlock.Text>
    </TextBlock>

    或者
    
    <TextBlock Text="{Binding Path=Title, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type Window}}}">
    </TextBlock>

    
    
    当创建RelativeSource对象时，FindAncestor模式有4种

    RelativeSourceMode枚举值
    Self                            表达式绑定到同一元素的另一个属性上
    FindAncestor                    表达式绑定到父元素。WPF将查找元素树直至发现期望的父元素。为了指定父元素，还必须设置AncestorType属性以指示希望查找的父元素的类型。
                                    此外，还可以用AncestorLevel属性略过发现的一定数量的特定元素。例如，当在一棵树中查找时，如果希望绑定到第三个ListBoxItem类型的元素，
                                    应当使用如下设置——AncestorType={x:Type ListBoxItem};并且AncestorLevel=3，从而略过前两个ListBoxItem元素。默认情况下，AncestorLevel
                                    属性设置为1，并在找到第一个匹配的元素时停止查找
    PreviousData                    表达式绑定到数据绑定列表中的前一个数据项。在列表项中会使用这种模式
    TemplateParent                  表达式绑定到应用模板的元素。只有当绑定位于控件模板或者数据模板内部时，这种模式才能工作
    
    RelativeSource属性看似多余，并且会使标记变得复杂，为什么不使用Source或者ElementName属性直接绑定到希望使用的源？
    并不总是可以使用Source或者ElementName属性，这通常是因为源对象和目标对象在不同的标记块中。当创建控件模板和数据模板时会出现这种情况
    (例如，如果正在构建改变列表项显示方式的数据模板，可能需要访问顶级ListBox对象以读取属性)
    
    -->
    <StackPanel Background="Beige">
        <TextBlock Width="400" Height="{Binding RelativeSource={RelativeSource Self}, Path=Width}" Text="RelativeSource之Self，宽度和高度相同"/>
        <Button>
            <Button.Style>
                <Style>
                    <Setter Property="Panel.Background" Value="Yellow"/>
                    <Setter Property="Control.Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type Button}">
                                <Grid>
                                    <Ellipse Width="100" Height="100">
                                        <Ellipse.Fill>
                                            <SolidColorBrush Color="{Binding Path=Background.Color, RelativeSource={RelativeSource TemplatedParent}}"/>
                                        </Ellipse.Fill>
                                    </Ellipse>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Button.Style>
            RelativeSource之TemplatedParent，这个例子中TemplateParent就是指的Button
        </Button>
        <Label Background="{Binding RelativeSource={RelativeSource AncestorType={x:Type Grid}}}">
            RelativeSource之AncestorType，指定绑定源为某个父元素
        </Label>
    </StackPanel>
</Window>
