<Window x:Class="WPF_Binding.UpdateSourceTrigger"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPF_Binding"
        mc:Ignorable="d"
        Title="UpdateSourceTrigger" Height="130" Width="310">

    <!--
    绑定更新

    由Binding.UpdateSourceTrigger属性控制

    UpdateSourceTrigger枚举值
    PropertyChanged                              当目标属性发生变化时立即更新源
    LostFocus                                    当目标属性发生变化并且目标丢失焦点时更新源
    Explicit                                     除非调用BindingExpression.UpdateSource()方法，否则无法更新源
    Default                                      根据目标属性的元数据确定更新行为
                                                 (从技术角度看，是根据FrameworkPropertyMetadata.DefaultUpdateSourceTrigger属性决定更新行为)
                                                 大多数属性的默认行为是PropertyChanged，但TextBox.Text属性的默认行为是LostFocus

    注意！！！上面的值不影响目标的更新方式。他们仅控制TwoWay或OneWayToSource模式的绑定中的源的更新方式

    (TextBox.Text属性的默认行为是LostFocus，这仅是因为当用户输入内容时，文本框中的文本会不断地变化，从而会引起多次更新。根据源控件更新自身的方式，
    PropertyChanged更新模式会使应用程序的运行更缓慢。此外，可能会导致源对象在编辑完成之前重新更新自身，而这可能引起验证问题)
    -->





        <!--对于MVVM架构的程序，几乎不会使用到Explicit-->

    <StackPanel Margin="15">
        <WrapPanel>
            <TextBlock Text="Window Title:"/>
            <TextBox Name="txtWindowTitle" Text="{Binding Title, UpdateSourceTrigger=Explicit}" Width="150"/>
            <Button Name="btnUpdateSource" Click="btnUpdateSource_Click" Margin="5,0" Padding="5,0" Content="*"/>
        </WrapPanel>
        <WrapPanel Margin="0,10,0,0">
            <TextBlock Text="Window Dimensions:"/>
            <TextBox Text="{Binding Width, UpdateSourceTrigger=LostFocus}" Width="50"/>
            <TextBlock Text="x"/>
            <TextBox Text="{Binding Height, UpdateSourceTrigger=PropertyChanged}" Width="50"/>
        </WrapPanel>
    </StackPanel>
</Window>
