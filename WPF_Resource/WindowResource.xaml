<Window x:Class="WPF_Resource.WindowResource"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPF_Resource"
        mc:Ignorable="d"
        Title="WindowResource" Height="300" Width="300">
        <!--
    WPF对象资源
        
    方便重用.NET对象

    尽管可在代码中创建和操作资源，但通常在XAML标记中定义资源。一旦定义资源，就可以在窗口标记的所有其他部分使用资源(或者，
    对于应用程序资源，可在应用程序的所有其他部分使用)

    WPF对象资源也是重用WPF样式的基础

    程序集资源与WPF对象资源区别：
    程序集资源时一块嵌入到编译过的程序集中的二进制数据。使用程序集资源可确保应用程序具有其所需的图像或者声音文件。另一方面
    对象资源时希望在某个位置定义并在其他几个位置重复使用的.NET对象

    WPF允许在代码中以及在标记中的各个位置定义资源(和特定的控件、窗口一起定义，或在整个应用程序中定义)

    WPF对象资源的优点：
    1.高效
    可通过资源定义对象，并在标记中的多个地方使用，精简代码
    2.可维护性
    可通过资源使用低级的格式化细节（如字号），并将他们移到便于对其进行修改的中央位置。在XAML中创建资源相当于在代码中创建常量
    3.适应性
    一旦特定信息与应用程序的其他部分分离开来，并放置到资源部分中，就可以动态地修改这些信息。例如，可能希望根据用户的个人喜好或当前语言
    修改资源的细节

    

    
    
    
    
    资源集合

    每个元素都有Resources属性(FrameworkElement类)，该属性存储了一个资源字典集合(他是ResourceDictionary类的实例)，资源集合可包含任意类型的对象，并根据字符串编写索引

    尽管每个元素都提供了Resources属性，但通常在窗口级别定义资源。这是因为每个元素都可以访问各自资源集合中的资源，也可以访问所有父元素的资源集合中的资源

    
    
    
    注意，可在资源部分中实例化任何.NET类(包括自定义类)，只要该类是XAML友好的即可。这意味着该类需要一些基本特性，如公有的无参构造函数和可写的属性

    
    
    
    
    
    资源的层次

    每个元素都有自己的资源集合，为了找到期望的资源，WPF在元素树中进行递归搜索
    注意，当使用静态资源时，必须总是在引用资源之前在标记中定义资源

    
    
    应用程序资源
    在创建应用程序资源之前，需要考虑在复杂性和重用性之间取得平衡。添加应用程序资源可提高重用性，但会增加复杂性，因为没有
    立即明确哪些窗口使用给定的资源(从概念上讲，这与使用太多全局变量的旧式C++程序一样)。一条正确的指导原则是：如果对象需要被
    广泛重用(例如，在许多窗口中重用)，可使用应用程序资源；如果只是在两三个窗口中使用，可考虑在每个窗口中分别定义资源

    
    

    
    
    
    
    
    系统资源

    (位于System.Windows命名空间)
    SystemColors                      用于访问颜色设置
    SystemFonts                       用于访问字体设置
    SystemParameters                  封装了大量的设置列表

    (注意，SystemColors和SystemFonts类有两个版本，他们分别位于System.Windows命名空间和System.Drawing命名空间。System.Windows命名空间中的版本是
    WPF的一部分，他们使用正确的数据类型并且支持资源系统，位于System.Drawing命名空间中的版本是Windows窗体的一部分，对于WPF应用程序，他们没有用处)

    SystemColors、SystemFonts和SystemParameters类通过静态属性公开了他们的所有细节
    label.Foreground = new SolidBrush(SystemColors.WindowTextColor);
    或者
    label.Foreground = SystemColors.WindowTextBrush
    在WPF中，可使用静态标记扩展访问静态属性
    <Label Foreground="{x:Static SystemColors.WindowTextBrush}">Ordinary text</Label>
    因为没有使用资源，这会导致一个问题，当解析窗口并创建标签时，会根据当前窗口文本颜色的“快照”创建画刷。如果在应用程序运行时
    (在显示了包含标签的窗口后)改变了Windows颜色，Label控件不会更新自身，具有这种行为的应用程序被认为是不太合理的
    为了解决这个问题，不能将Foreground属性直接设置为画刷对象，而是需要将它设置为封装了该系统资源的DynamicResource对象。幸运的是，所有
    SystemXxx类都提供了可返回ResourceKey对象引用的补充属性集，使用这些引用可从系统资源集合中提取资源。这些属性与直接返回对象的
    普通属性同名，后面加上单词Key，例如SystemColors.WindowTextBrush的资源键是SystemColors.WindowTextBrushKey
    (注意，资源键不仅是名称——他们是告诉WPF从哪儿查找特定资源的引用。ResourceKey类是不透明的，因此他没有提供有关如何识别系统资源的低级细节。然而
    不必担心您的资源会与系统资源发生冲突，因为他们位于不同的程序集中并使用不同的方式加以处理)
    <Label Foreground="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}">Ordinary text</Label>
    当系统设置变化时，Label控件能够无缝地更新自身
    

    -->

    <Window.Resources>
    <!--注意Key特性，该特性指定了在Window.Resources.Collection集合中编写画刷索引的名称。当需要检索资源时，只要使用相同的名称，就可以使用需要的任何内容-->
        <ImageBrush x:Key="TileBrush" TileMode="Tile" ViewportUnits="Absolute" Viewport="0 0 32 32" ImageSource="happyface.jpg" Opacity="0.3"/>
    </Window.Resources>
    <StackPanel Margin="5">
    <!--
    通过标记扩展引用资源，有两个标记扩展可供使用：
        1.StaticResource 用于静态资源
        静态资源在首次创建窗口时一次性地设置完毕
        2.DynamicResource 用于动态资源
        如果发生了改变，就会重新应用资源

        (以上是简单区别)

        因为这里图像画刷永远不会改变，所以使用静态资源是合适的(这里使用DynamicResource也可以，就是开销稍大些)
        -->
        <Button Background="{StaticResource TileBrush}" Padding="5"
                FontWeight="Bold" FontSize="14" Margin="5" Content="A Tiled Button"/>
        <Button Padding="5" Margin="5" FontWeight="Bold" FontSize="14" Content="A Normal Button"/>
        
        <Button Background="{StaticResource TileBrush}" Padding="5" Margin="5" FontWeight="Bold" FontSize="14" Content="Another Tiled Button"/>
    </StackPanel>
</Window>
