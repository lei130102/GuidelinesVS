<Window x:Class="WPF_Font.TextFormattingMode"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPF_Font"
        mc:Ignorable="d"
        Title="TextFormattingMode" Height="200" Width="400">

    <!--

    文本格式化模式
    
    WPF中的文本渲染和旧式的基于GDI的应用程序的文本渲染有很大区别。很大一部分区别是由于WPF的设备无关显示系统造成的，但WPF中的文本渲染也得到了
    显著增强，能更清晰地显示文本，在LCD监视器上尤其如此

    然而，WPF文本渲染具有一个众所周知的缺点。当使用较小的文本尺寸时，文本会变得模糊，并会显示一些令人讨厌的问题(例如，边缘周围的颜色干扰)。使用
    GDI文本显示时不会发生这些问题，原因是GDI使用很多技巧来优化小文本的清晰度。例如，GDI能够修改小字母的星状，调整他们的位置，并在像素边界对齐
    所有内容。这些步骤导致字体失去了其特殊的性质，但当处理极小的文本时，可在屏幕上得到更好的阅读体验

    那么如何修复WPF的小文本显示问题呢？最好增大文本(在96dpi的监视器上，使用大约15设备无关单位的文本尺寸，这个问题就会消失)，或使用具有足够的
    分辨率，从而能够清晰显示任何尺寸文本的高dpi显示器。但是因为这些选择往往脱离了实际，所以WPF还具有选择使用与GDI类似的文本渲染能力

    为了使用GDI风格的文本渲染，为显示文本的元素(例如TextBlock或Label)增加了TextOptions.TextFormattingMode附加属性，并将其设置为Display(而不是标准值Ideal)
    
    
    -->

    <StackPanel Margin="10">
        <Label TextOptions.TextFormattingMode="Ideal" FontSize="9">TextFormattingMode.Ideal, small text</Label>
        <Label TextOptions.TextFormattingMode="Display" FontSize="9">TextFormattingMode.Display, small text</Label>
        <Label TextOptions.TextFormattingMode="Ideal" FontSize="20">TextFormattingMode.Ideal, large text</Label>
        <Label TextOptions.TextFormattingMode="Display" FontSize="20">TextFormattingMode.Display, large text</Label>
    </StackPanel>

    <!--
    在 .NET 框架 4.0 中，Microsoft 引入了 TextOptions 类和 TextFormattingMode，TextRenderingMode 属性来给予程序员更多
    的文本渲染控制。这让你可以在控制层面指定文本格式化与渲染的方式。-->

    <!--
    TextFormattingMode
    使用 TextFormattingMode 属性，你便可以决定文本格式化所用的算法。你可以选择用 Ideal（默认值）或 Display。一般你不需要改动这
    个属性，因为 Ideal 设置在大多数情况下都是最好的。但如果你需要渲染非常小的文本，Display 设置有时候更好。
    -->

    <!--
    TextFormattingMode属性仅仅是针对小尺寸文本的解决方案，记住这一点很重要。如果为更大的文本(超过15点的文本)使用该属性，文本将不会
    同样清晰，间隔将不会同样均衡，并且字体将不会被同样准确呈现。而且如果结合旋转、缩放或改变外观的变换使用文本，应当总是使用WPF的
    标准文本显示模式。因为针对显示文本的GDI风格的优化是在所有变换之前应用的。一旦应用变换，结果将不再对其到像素边界，文本的显示将
    变得模糊不清
    -->
    

    
</Window>
