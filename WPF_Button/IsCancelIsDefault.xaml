<Window x:Class="WPF_Button.IsCancelIsDefault"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPF_Button"
        mc:Ignorable="d"
        Title="IsCancelIsDefault" Height="450" Width="800">
        <!--
        Button类表示一直使用的Windows下压按钮，他添加了两个可写属性：IsCancel和IsDefault
        -->
    <StackPanel>
        <Button Content="窗口的取消按钮(IsCancel=True)：" IsCancel="True" Click="CancelButton_Click"/>
        <TextBlock Text="在当前窗口的任何位置如果按下Esc键，就会触发该按钮" TextWrapping="Wrap"/>
        <Button Content="窗口的默认按钮(IsDefault=True)：" IsDefault="True" Click="DefaultButton_Click"/>
        <TextBlock Text="如果焦点位于某个非按钮控件上，默认按钮具有蓝色阴影，几乎像是具有焦点。如果按下Enter键，就会触发默认按钮。" TextWrapping="Wrap"/>
        <TextBlock Text="如果焦点位于另一个按钮控件上，当前有焦点的按钮就具有蓝色阴影，而且按下Enter键会触发当前按钮而不是默认按钮。" TextWrapping="Wrap"/>
        <TextBlock Text="注意：仍需为取消按钮和默认按钮编写事件处理代码，因为WPF没有提供这一行为" FontWeight="Bold"/>
    </StackPanel>
</Window>

<!--
(
IsDefaulted属性(只读)

如果另一个控件具有焦点并且该控件不接受Enter键输入，那么对于默认按钮，IsDefaulted属性会返回true，这种情况下，按下Enter键会触发该按钮
(例如，除非将TextBox.AcceptsReturn属性设置为true，否则TextBox控件不接受Enter键输入。当AcceptsReturn属性被设置为true的TextBox控件具有焦点时，
默认按钮的IsDefaulted属性为false。当AcceptsReturn属性被设置为false的TextBox控件具有焦点时，默认按钮的IsDefaulted属性为true。还要更容易令人困
惑的情况，当按钮本身具有焦点时，IsDefaulted属性返回false，尽管这时按下Enter键会触发该按钮)

尽管未必希望使用IsDefaulted属性，但使用该属性确实可以编写出特定类型的样式触发器，如果不使用IsDefaulted属性，只是将它添加到普通的WPF列表中，这样常会使
您的同事感到困惑
) 
-->
