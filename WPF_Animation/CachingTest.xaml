<Window x:Class="WPF_Animation.CachingTest"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPF_Animation"
        mc:Ignorable="d"
        Title="CachingTest" Height="600" Width="800" Name="window">
        <!--

        位图缓存

    位图缓存通知WPF获取内容的当前位图图像，并将其复制到显卡的内存中，这时，显卡可以控制位图的操作和显示的刷新。这个处理过程比让
    WPF完成所有工作要快很多，并且和显卡不断地通信
    
    如果运用得当，位图缓存可以改善应用程序的绘图性能。但如果运用不当，就会浪费显存并且实际上会降低性能。所以，在使用位图缓存之前，
    需要确保真正适合，下面列出一些指导原则：
    1.如果正在绘制的内容需要频繁地重新绘制，使用位图缓存可能是合理的。因为每次后续的重新绘制将更快。一个例子是当其他一些具有动画的
    对象浮动在形状表面上时，使用BitmapCacheBrush画刷绘制形状的表面。尽管形状没有变化，但是形状的不同部分被遮挡住或显露出来，从而需
    要重新绘制
    2.如果元素的内容经常变化，使用位图缓存可能不合理。因为可视化内容每次改变时，WPF需要重新渲染位图并将其发送到显卡缓存，而这需要耗费
    时间。该规则有些晦涩，因为某些改变不会导致缓存无效。安全操作的例子包括使用变化旋转以及重新缩放元素、剪裁元素、改变元素的透明度以及
    应用效果。另一方面，改变元素的内容、布局以及格式将强制重新渲染位图
    3.尽量少缓存内容。位图越大，WPF存储缓存副本所需的时间越长，需要的显存越多。一旦耗尽显存，WPF将被迫使用更慢的软件渲染

    不良的缓存策略可能导致更严重的性能问题，应用程序不会充分地优化。所以除非满足这些指导原则，否则不要使用缓存。同样，可使用性能分析工具
    Perforator核实您的策略是否可以改善性能
    
    在本例中，一个动画推动一个简单的图形——正方形——在Canvas面板上移动，Canvas面板包含一条具有复杂几何图形的路径。当正方形在Canvas面板表面上
    移动时，强制WPF重新计算路径并填充丢失的部分。这会带来极大的CPU负担，并且动画甚至可能开始变得断断续续

    可采用几种方法解决该问题：
    1.
    一种选择是使用一幅位图替换背景，WPF能够更高效地管理位图
    2.
    更灵活的选择是使用位图缓存，这种方式可继续将存活的、可交互的元素作为背景
    为启用位图缓存功能，将相应元素的CacheMode属性设置为BitmapCache。每个元素都提供了CacheMode属性，这意味着您可以精确选择为哪个元素使用这一特征
    <Path CacheMode="BitmapCache" ...></Path>

    注意，如果缓存包含其他元素的元素，如布局容器，所有元素都将被缓存到一幅位图中。因此，当为类似Canvas的容器添加缓存时要格外谨慎——只有当
    Canvas容器较小而且其内容不会改变时才这么做
    
    通过这个简单修改，可立即看到区别。首先，窗口显示的时间要稍长一些。但动画的运行将更平滑，并且CPU的负担将显著降低。可通过Windows任务管理器进行检查——经常
    可以看到CPU的负担从接近100%减少到20%以下

    通常，当启用位图缓存时，WPF采用元素当前尺寸的快照并将其位图复制到显卡中。如果之后使用ScaleTransform放大元素，这会变成一个问题。在这种情况下，
    将放大缓存的位图，而不是实际的元素，当放大元素时这会导致模糊放大以及色块

    例如，设想一个修订过的示例。在示例中，第二个同步动画扩展Path使其为原始尺寸的10倍，然后缩回原始尺寸，为了确保具有良好的显示质量，可使用
    5倍于Path原始尺寸的尺寸缓存其位图：
    <Path...>
        <Path.CacheMode>
            <BitmapCache RenderAtScale="5"/>
        </Path.CacheMode>
    </Path>
    这样可解决像素化问题。虽然缓存的位图仍比Path的最大动画尺寸(最大尺寸达10倍于其原始尺寸)小，但显卡能使位图的尺寸加倍，从5倍到10倍，而不会有任何
    明显的缩放问题。更重要的是，这可使应用程序避免过多地使用显存
    
    -->

    <Window.Resources>
        <local:ArithmeticConverter x:Key="converter"></local:ArithmeticConverter>
    </Window.Resources>

    <Window.Triggers>
        <EventTrigger RoutedEvent="Window.Loaded">
            <BeginStoryboard>
                <Storyboard>
                    <DoubleAnimation Storyboard.TargetProperty="(Canvas.Left)" Storyboard.TargetName="rect" AutoReverse="True" RepeatBehavior="Forever"
                To="{Binding ElementName=window,Path=Width,Converter={StaticResource converter},ConverterParameter=-100}"
                               Duration="0:0:15"></DoubleAnimation>
                </Storyboard>
            </BeginStoryboard>
        </EventTrigger>
    </Window.Triggers>
    <Grid Margin="5">
        <Grid.RowDefinitions>
            <RowDefinition></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>

        <Canvas Name="canvas">
            <Path Name="pathBackground" Stroke="DarkRed" StrokeThickness="1" ></Path>

            <Rectangle Name="rect" Canvas.Left="10" Canvas.Top="100" Fill="Blue" Width="75" Height="75">
            </Rectangle>
        </Canvas>

        <CheckBox Grid.Row="2" x:Name="chkCache" Content="Enable Caching"
		 IsChecked="False" Click="chkCache_Click"></CheckBox>
    </Grid>
</Window>
