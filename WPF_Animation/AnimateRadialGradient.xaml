<Window x:Class="WPF_Animation.AnimateRadialGradient"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPF_Animation"
        mc:Ignorable="d"
        Title="AnimateRadialGradient" Height="328" Width="302">
    <!--
    动态改变画刷

    本例中，当动画运行时，径向渐变的中心点沿椭圆漂移
    
    ColorAnimation动画在两个颜色之间逐渐混合，创建一种微妙的颜色转移效果
    PointAnimation动画可将点从一个位置移到另一个位置(本质上与使用独立的DoubleAnimation，通过线性插值同时修改
                  X坐标和Y坐标是相同的)

    -->
    <Window.Triggers>
        <EventTrigger RoutedEvent="Window.Loaded">
            <EventTrigger.Actions>
                <BeginStoryboard>
                    <Storyboard>
                    <!--
                    移动中心点以及改变第二种颜色的两个动画

                        <PointAnimation Storyboard.TargetName="ellipse"a Storyboard.TargetProperty="Fill.GradientOrigin"
                        From="0.7,0.3" To="0.3,0.7" Duration="0:0:10" AutoReverse="True" RepeatBehavior="Forever">
                        </PointAnimation>

                        <ColorAnimation Storyboard.TargetName="ellipse" Storyboard.TargetProperty="Fill.GradientStops[1].Color"
                        To="Black" Duration="0:0:10" AutoReverse="True" RepeatBehavior="Forever">
                        </ColorAnimation>

                        -->
                        <PointAnimationUsingKeyFrames Storyboard.TargetName="ellipse" Storyboard.TargetProperty="Fill.GradientOrigin"
                                                      RepeatBehavior="Forever">
                            <LinearPointKeyFrame Value="0.7,0.3" KeyTime="0:0:0"/>
                            <LinearPointKeyFrame Value="0.3,0.7" KeyTime="0:0:5"/>
                            <LinearPointKeyFrame Value="0.5,0.9" KeyTime="0:0:8"/>
                            <LinearPointKeyFrame Value="0.9,0.6" KeyTime="0:0:10"/>
                            <LinearPointKeyFrame Value="0.8,0.2" KeyTime="0:0:12"/>
                            <LinearPointKeyFrame Value="0.7,0.3" KeyTime="0:0:14"/>
                            <DiscretePointKeyFrame Value="0.7,0.3" KeyTime="0:0:20"/>
                            <DiscretePointKeyFrame Value="0.3,0.7" KeyTime="0:0:25"/>
                            <DiscretePointKeyFrame Value="0.5,0.9" KeyTime="0:0:28"/>
                            <DiscretePointKeyFrame Value="0.9,0.6" KeyTime="0:0:20"/>
                            <DiscretePointKeyFrame Value="0.8,0.2" KeyTime="0:0:22"/>
                            <DiscretePointKeyFrame Value="0.7,0.3" KeyTime="0:0:24"/>
                        </PointAnimationUsingKeyFrames>
                        <ColorAnimation Storyboard.TargetName="ellipse" Storyboard.TargetProperty="Fill.GradientStops[1].Color"
                                        To="Black" Duration="0:0:10"
                                        AutoReverse="True" RepeatBehavior="Forever"/>
                    </Storyboard>
                </BeginStoryboard>
            </EventTrigger.Actions>
        </EventTrigger>
    </Window.Triggers>

    <Grid>
        <Ellipse Name="ellipse" Margin="5" Grid.Row="1" Stretch="Uniform">
            <Ellipse.Fill>
                <RadialGradientBrush RadiusX="1" RadiusY="1" GradientOrigin="0.7,0.3">
                    <GradientStop Color="White" Offset="0"/>
                    <GradientStop Color="Blue" Offset="1"/>
                </RadialGradientBrush>
            </Ellipse.Fill>
        </Ellipse>
    </Grid>
</Window>
<!--
    通过修改LinearGradientBrush和RadialGradientBrush画刷的颜色和偏移值可创建许多精彩效果。

    如果还不够，渐变画刷还有自己的RelativeTransform属性，可使用该属性旋转、缩放、拉伸以及扭曲画刷

    WPF团队有一个有趣的称为Gradient Obsession的工具，该工具用于构建基于渐变的动画
    -->
