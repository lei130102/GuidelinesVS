<Window x:Class="WPF_Animation.FrameBasedAnimation"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPF_Animation"
        mc:Ignorable="d"
        Title="FrameBasedAnimation" Height="396" Width="463">
        <!--

    基于帧的动画

    除基于属性的动画系统外，WPF提供了一种创建基于帧的动画的方法，这种方法只使用代码。需要做的全部工作是响应静态的
    CompositionTarget.Rendering事件，触发该事件是为了给每帧获取内容。这是一种非常低级的方法，除非使用标准的基于属性的动画
    模型不能满足需要(例如，构建简单地侧边滚动游戏、创建基于物理的动画或构建粒子效果模型(如火焰、雪花以及气泡))，否则不会希望
    使用这种方法。

    构建基于帧的动画只需要为静态的CompositionTarget.Rendering事件关联事件处理程序。一旦关联事件处理程序，WPF就开始不断地
    调用这个事件处理程序(只要渲染代码的执行速度足够快，WPF每秒将调用60次)。在渲染事件处理程序中，您需要在窗口中相应地创建
    或调整元素。换句话说，需要自行管理全部工作。当动画结束时，分离事件处理程序

    在本示例中，随机数量的圆从Canvas面板的顶部向底部下落。他们（根据随机生成的开始速度）以不同速度下降，但以相同的速率加速。
    当所有的圆到达底部时，动画结束

    每个下落的圆由Ellipse元素表示。使用自定义的EllipseInfo类保存椭圆的引用，并跟踪对于物理模型而言十分重要的一些细节。在本例中
    只有如下信息很重要——椭圆沿X轴的移动速度(可很容易地扩展这个类，使其包含沿着Y轴运动的速度、额外的加速信息等)
    
    -->
    <Grid Margin="3">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition></RowDefinition>
        </Grid.RowDefinitions>

        <StackPanel Orientation="Horizontal">
            <Button Margin="3" Padding="3" Click="cmdStart_Clicked">Start</Button>
            <Button Margin="3" Padding="3" Click="cmdStop_Clicked">Stop</Button>
        </StackPanel>
        <Canvas Name="canvas" Grid.Row="1" Margin="3"></Canvas>
    </Grid>
</Window>
