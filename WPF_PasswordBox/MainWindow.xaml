<Window x:Class="WPF_PasswordBox.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPF_PasswordBox"
        mc:Ignorable="d"
        Title="MainWindow" Height="450" Width="200">
        <!--
    PasswordBox看起来与TextBox类似，但他通过显示圆圈符号字符串来屏蔽实际字符(可通过设置PasswordChar属性选择不同的屏蔽字符)。此外，PasswordBox控件不支持剪切板，从而
    不能复制内部的文本

    与TextBox类非常相似，他提供了MaxLength属性：Clear()、Paste()以及SelectAll()方法；并且提供了当文本发生变化时触发的事件(PasswordChanged事件)。TextBox类和
    PasswordBox类最重要的区别在于内部的工作方式。尽管可使用Password属性作为普通字符串读取和设置文本，但在内部PasswordBox类只使用System.Security.SecureString对象

    与普通文本非常类似，SecureString是纯文本对象。区别是在内存中的存储方式。SecureString以加密方式在内存中保存。用于加密字符串的密钥是随机生成的，存储在一块从来不会
    写入到磁盘的内存中。最终的结果是即使计算机崩溃，恶意用户也不可能通过检查页面文件来检索密码数据。即使找到，也只能找到加密版本。

    SecureString类还提供了根据需要丢弃内容的功能。当调用SecureString.Dispose()方法时，内存中的密码数据就会被改写。这样可保证所有密码信息从内存中被改写擦除，并且不能
    再以任何方式使用。正如所期望的，当控件被销毁时，PasswordBox控件会自动为保存在内存中的SecureString对象调用Dispose()方法
    -->
    <StackPanel>
        <PasswordBox/>
        <PasswordBox PasswordChar="X"/>
        <PasswordBox MaxLength="6"/>
    </StackPanel>
</Window>

<!--PasswordBox 与绑定
当你需要从 PasswordBox 获得密码，你可以在逻辑代码里使用 Password 属性。然而，为了安全，
Password 属性没有作为依赖属性实现，也就是说你不能绑定到它。

这不一定会影响到你——就像上文所说，你仍旧可以在逻辑代码里读取密码。但如果你想实现 MVVM
或者你就是喜欢数据绑定，这里有另一个解决方案。你可以在这里读到更详细的内容：
http://blog.functionalfun.net/2008/06/wpf-passwordbox-and-data-binding.html-->
