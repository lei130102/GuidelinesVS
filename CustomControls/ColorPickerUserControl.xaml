<UserControl x:Class="CustomControls.ColorPickerUserControl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:CustomControls"
             mc:Ignorable="d" 
             Name="colorPicker"><!--命名的UserControl-->
<!--
命名用户控件

    在本示例中，为顶级的UserControl控件指定了名称(colorPicker)，从而可以直接编写绑定到自定义用户控件类中属性的数据绑定表达式
    然而，这种技术导致了一个明显的问题。当在窗口(或页面)中创建用户控件的实例并为之指定新名称时，会发生什么情况呢？
    幸运的是，这种情况可以工作，不会出现问题，因为用户控件在包含他的窗口之前执行初始化。首先初始化用户控件，并连接他的数据绑定。
    接下来初始化窗口，并且在窗口标记中设置的名称被应用到用户控件。窗口中的数据绑定表达式和事件处理程序现在可使用在窗口中定义的
    名称访问用户控件，而且所有工作都如您所期望的那样进行
    尽管这听起来简单，但如果使用代码检查UserControl.Name属性，可能会注意到一些奇怪的问题，例如，如果在用户控件的某个事件处理程序
    中检查Name属性，将看到在窗口中定义的新名称。类似地，如果没有在窗口标记中设置名称，用户控件会继续保留来自用户控件标记的名称。
    如果在窗口代码中检查Name属性，就会看到这个名称
    虽然这些奇怪的事情并不表示存在问题，但更好的方法是避免在用户控件的标记中命名用户控件，并使用Binding.RelativeSource属性查找
    元素树，直到找到UserControl父元素。下面是完成该工作的更长一些的语法

    <Slider Name="sliderRed" Minimum="0" Maximum="255" Value="{Binding Path=Red
    , RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type UserControl}}}"/>
    
    -->
    
    
    
             <!--
    构建基本的用户控件(UserControl)

    创建一个简单用户控件是开始自定义控件的好办法。首先创建一个基本的颜色拾取器。接下来将分析如何将这个控件分解成功能更强大的
    基于模板的控件

    创建基本的颜色拾取器很容易。然而，创建自定义颜色拾取器仍是有价值的练习，因为这不仅演示了构建控件的各种重要概念，而且提供了一个实用的功能
    
    可为颜色拾取器创建自定义对话框。但如果希望创建能集成进不同窗口的颜色拾取器，使用自定义控件是更好的选择。最简单的自定义控件类型是用户控件(UserControl)，
    当设计窗口或页面时通过用户控件可以使用相同的方式组装多个元素。因为仅通过直接组合现有控件并添加功能并不能实现颜色拾取器，所以用户控件看起来是更合理的选择
    
    注意：用户控件方法存在明显缺点——限制了定制自定义颜色拾取器的外观，以适应不同窗口、不同应用程序以及不同用法的能力，幸运的是，构建功能更强大的
    基于模板的控件并不难
    -->

    <!--
    定义好用户控件的公有接口后，需要做的所有工作就是创建控件外观的标记
    在本示例中，需要使用一个基本Grid控件将三个Slider控件和预览颜色的Rectangle元素组合在一起。技巧是使用数据绑定表达式，将这些
    控件连接到合适的属性，而不需要使用事件处理代码
    总之，颜色拾取器中总共使用了4个数据绑定表达式。三个滑动条被绑定到Red、Green和Blue属性，而且属性值的允许范围是0~255(一个字节
    可以接受的数值)。Rectangle.Fill属性使用SolidColorBrush画刷进行设置，画刷的Color属性被绑定到用户控件的Color属性

    用于用户控件的标记和无外观控件的控件模板扮演相同的角色。如果希望使标记中的一些细节是可配置的，可使用将他们连接到控件属性的绑定表达式。例如，
    Rectangle元素的宽度被固定为50个单位，然而，可使用数据绑定表达式从用户控件的依赖项属性中提取数值来代替这些细节。这样，控件使用者可通过修改
    属性来选择不同的宽度。同样，可使笔画颜色和宽度也是可变的。然而，如果希望使控件具有真正地灵活性，最好创建无外观的控件，并在模板中定义标记

    偶尔可选用数据绑定表达式，重用已在控件中定义过的核心属性。例如，UserControl类使用Padding属性在外侧边缘和用户定义的内部内容之间添加空间
    (这一细节是通过UserControl控件的控件模板实现的)。然而，也可以使用Padding属性在每个滑动条的周围设置空间
    类似地，也可以从UserControl类的BorderThickness和BorderBrush属性为Rectangle元素获取边框设置。同样，这种快捷方式对于创建简单的
    控件是非常合理的，但可通过引入额外的属性(SliderMargin、PreviewBorderBrush以及PreviewBorderThickness)或创建功能完备的基于模板
    的控件来加以改进
    -->
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
            <RowDefinition Height="Auto"></RowDefinition>
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition></ColumnDefinition>
            <ColumnDefinition Width="Auto"></ColumnDefinition>
        </Grid.ColumnDefinitions>

        <Slider Name="sliderRed" Minimum="0" Maximum="255"
             Margin="{Binding ElementName=colorPicker,Path=Padding}"
             Value="{Binding ElementName=colorPicker,Path=Red}"></Slider>

        <Slider Grid.Row="1" Name="sliderGreen" Minimum="0" Maximum="255"
             Margin="{Binding ElementName=colorPicker,Path=Padding}"
                  Value="{Binding ElementName=colorPicker,Path=Green}"></Slider>

        <Slider Grid.Row="2" Name="sliderBlue" Minimum="0" Maximum="255"
             Margin="{Binding ElementName=colorPicker,Path=Padding}"
                  Value="{Binding ElementName=colorPicker,Path=Blue}"></Slider>


        <Rectangle Grid.Column="1" Grid.RowSpan="3"
                 Margin="{Binding ElementName=colorPicker,Path=Padding}"
                 Width="50" Stroke="Black" StrokeThickness="1">
            <Rectangle.Fill>
                <SolidColorBrush Color="{Binding ElementName=colorPicker,Path=Color}"></SolidColorBrush>
            </Rectangle.Fill>
        </Rectangle>

    </Grid>
</UserControl>
