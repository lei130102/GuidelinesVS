<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:CustomControls">
                    <!--
                    还需要为FlipPanel控件添加一个应用默认模板的样式。将该样式放在generic.xaml资源字典中，
    正如在开发ColorPicker控件时所做的那样

    
    
    
    FlipPanel需要两个状态：
    1.正常状态
    该故事板确保只有前面的内容是可见的，后面的内容被翻转、淡化或移出视图
    2.翻转状态
    该故事板确保只有后面的内容是可见的，前面的内容通过动画被移出视图

    FlipPanel需要两个部件：
    1.FlipButton
    这是一个按钮，当单击该按钮时，将视图从前面改到后面(或从后面改到前面)。FlipPanel控件通过处理该按钮的事件提供该服务
    2.FlipButtonAlternate
    这是一个可选元素，与FlipButton的工作方式相同。允许控件使用者在自定义模板中使用两种不同的方法。一种选择是使用在可翻转区域外的单个翻转按钮，
    另一种选择是在可翻转区域的面板两侧放置独立的翻转按钮

    注意，如果敏锐的话，在此可能会注意到一个令人感到困惑的设计选择。与自定义的ColorPicker控件不同，在FlipPanel控件中具有名称的部件不是使用
    PART_命名语法(如PART_FlipButton)，因为PART_命名语法是在可视化状态模型之前引入的。使用可视化状态模型，该约定已经变成了更简单的名称，尽管
    这仍是一个正在新兴的标准，而且在将来他可能发生变化。在此期间，只需要使用TemplatePart特性指出所有具有特定名称的部件，因而自定义控件应当是
    很好的

    还应当为前后内容区域添加部件。然而，FlipPanel控件不需要直接操作这些区域，只要模板包含在适当的时间隐藏和显示他们的动画即可(另一种选择是
    定义这些部件，从而可以明确地使用代码改变他们的可见性)。这样一来，即使没有定义动画，通过隐藏一部分并显示另一部分，面板仍能在前后内容区域
    之间变化。为简单起见，FlipPanel没有采取这种选择
    -->
    <Style TargetType="{x:Type local:FlipPanel}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:FlipPanel}">
                <!--
                    默认控件模板

                    根元素是具有两行的Grid面板，该面板包含内容区域(在顶行)和翻转按钮(在底行)。用两个相互重叠的Border元素填充内容区域，代表前面和后面
                    的内容，但一次只显示前面或后面内容

                    为了填充前面和后面的内容区域，FlipPanel控件使用ContentPresenter元素。该技术几乎和自定义按钮示例相同，只是需要两个ContentPresenter元素，
                    分别用于FlipPanel控件的前面和后面。FlipPanel控件还包含独立的Border元素来封装每个ContentPresenter元素。从而让控件使用者能通过设置
                    FlipPanel的几个直接属性勾勒出可翻转内容区域(BorderBrush、BorderThickness、Background以及CornerRadius)，而不是强制性地手动添加边框

                    当创建默认控件模板时，最好避免硬编码控件使用者可能希望定制的细节。相反，需要使用模板绑定表达式。在这个示例中，使用模板绑定表达式设置了
                    几个属性：BorderBrush、BorderThickness、CornerRadius、Background、FrontContent以及BackContent。为设置这些属性的默认值(这样即使
                    控件使用者没有设置他们，也仍然确保能得到正确的可视化外观)，必须为控件的默认样式添加额外的设置器
                    
                    -->
                    <Grid>
                    <!--
                        定义状态动画

                        状态动画是控件模板中最有趣的部分。他们是提供翻转行为的要素，他们还是为FlipPanel创建自定义模板的开发人员最有可能修改的细节

                        为定义状态组，必须在控件模板的根元素中添加VisualStateManager.VisualStateGroups元素

                        注意：为给模板添加VisualStateManager元素，模板必须使用布局面板。布局面板包含控件的两个可视化对象和VisualStateManager元素(该元素不可见)。
                        VisualStateManager定义具有动画的故事板，控件在合适的时机使用动画改变其外观

                        可在VisualStateGroups元素内部使用具有合适名称的VisualStateGroup元素创建状态组。在每个VisualStateGroup元素内部，为每个状态添加一个
                        VisualState元素，对于FlipPanel面板，有一个包含两个可视化状态的组
                        
                        每个状态对应一个具有一个或多个动画的故事板。如果存在这些故事板，就会在适当的时机触发他们(如果不存在，控件将按正常方式降级，而不会引发错误)

                        在默认控件模板中，动画使用简单地淡化效果从一个内容区域改变到另一个内容区域，并使用旋转变换翻转ToggleButton箭头使其指向另一个方向。

                        您将会注意到可视化状态将持续时间设置为0，这意味着动画立即应用其效果。这看起来可能有些怪——毕竟，不是需要更平缓的改变从而能够注意到动画效果吗？
                        实际上，该设计完全正确，因为可视化状态用于表示控件在适当状态时的外观。例如，当翻转面板处于翻转过的状态时，简单地显示其背面内容。翻转过程是
                        在FlipPanel控件进入翻转状态前的过渡，而不是翻转状态本身的一部分(状态和过渡之间的这个区别是很重要的，因为有些控件确实具有在状态期间运行的动画)
                        -->
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="ViewStates">
                            <!--
                                定义状态过渡
                                
                                过渡是从当前状态到新状态的动画。变换模型的优点之一是不需要为动画创建故事板。例如，如果添加如下标记，WPF会创建持续时间为0.7秒的动画以
                                改变FlipPanel控件的透明度，从而创建您所希望的悦目的褪色效果

                                过渡会应用状态组。当定义过渡时，必须将其添加到VisualStateGroup.Transitions集合。这个示例使用最简单地过渡类型：默认过渡。默认过渡应用于
                                该组中的所有状态变化

                                默认过渡是很方便的，但用于所有情况的解决方案不可能总是适合的。例如，您可能希望FlipPanel控件根据其进入的状态以不同的速度过渡。为实现
                                该效果，需要定义多个过渡，并且需要设置To属性以指示何时应用过渡效果
                                
                                
                                -->
                                <VisualStateGroup.Transitions>
                                <!--
                                FlipPanel将在0.5秒的时间内切换到Flipped状态，并在0.7秒的时间内进入Normal状态

                                    这个示例显示了当进入特定状态时应用的过渡，但还可使用From属性创建当离开某个状态时应用的过渡，并且可结合使用To和From属性来创建
                                    更特殊的只有当在特定的两个状态之间移动时才会应用的过渡。当应用过渡时WPF遍历过渡集合，在所有应用的过渡中查找最特殊的过渡，并
                                    只使用最特殊的那个过渡

                                    为了进一步加以控制，可创建自定义过渡动画来替换WPF通常使用的自动生成的过渡。您可能会由于几个原因而创建自定义过渡。下面是一些
                                    例子：使用更复杂的动画控制动画的步长，使用动画缓动、连续运行几个动画或在运行动画时播放声音

                                    为定义自定义过渡，在VisualTransition元素中放置具有一个或多个动画的故事板。在FlipPanel示例中，可使用自定义过渡确保ToggleButton
                                    箭头更快地旋转自身，而淡化过程更缓慢

                                    注意：当使用自定义过渡时，仍必须设置VisualTransition.GeneratedDuration属性以匹配动画的持续时间。如果没有设置该细节，VisualStateManager
                                    就不能使用自定义过渡，而且他将立即应用新状态(使用的实际时间值对于您的自定义过渡仍无效果，因为他只应用于自动生成的动画)

                                    但许多控件需要自定义过渡，而且编写自定义过渡是非常乏味的工作。仍需保持零长度的状态动画，这还会不可避免地在可视化状态和过渡之间复制一些细节

                                    -->
                                    <VisualTransition GeneratedDuration="0:0:0.7" To="Flipped">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="FlipButtonTransform"
       Storyboard.TargetProperty="Angle" To="90" Duration="0:0:0.2"></DoubleAnimation>
                                        </Storyboard>
                                    </VisualTransition>
                                    <VisualTransition GeneratedDuration="0:0:0.7" To="Normal">
                                        <Storyboard>
                                            <DoubleAnimation Storyboard.TargetName="FlipButtonTransform"
       Storyboard.TargetProperty="Angle" To="-90" Duration="0:0:0.2"></DoubleAnimation>
                                        </Storyboard>
                                    </VisualTransition>
                                </VisualStateGroup.Transitions>

                                <VisualState x:Name="Normal">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="BackContent" 
                       Storyboard.TargetProperty="Opacity" To="0" Duration="0" ></DoubleAnimation>
                                    </Storyboard>
                                </VisualState>

                                <VisualState x:Name="Flipped">
                                    <Storyboard>
                                        <DoubleAnimation Storyboard.TargetName="FlipButtonTransform"
       Storyboard.TargetProperty="Angle" To="90" Duration="0"></DoubleAnimation>
                                        <DoubleAnimation Storyboard.TargetName="FrontContent" 
                       Storyboard.TargetProperty="Opacity" To="0" Duration="0"></DoubleAnimation>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"></RowDefinition>
                            <RowDefinition Height="Auto"></RowDefinition>
                        </Grid.RowDefinitions>

                        <!-- This is the front content. -->
                        <Border x:Name="FrontContent" BorderBrush="{TemplateBinding BorderBrush}"
               BorderThickness="{TemplateBinding BorderThickness}"
               CornerRadius="{TemplateBinding CornerRadius}"
               >
                            <ContentPresenter
                     Content="{TemplateBinding FrontContent}">
                            </ContentPresenter>
                        </Border>

                        <!-- This is the back content. -->
                        <Border x:Name="BackContent" BorderBrush="{TemplateBinding BorderBrush}"
           BorderThickness="{TemplateBinding BorderThickness}"
           CornerRadius="{TemplateBinding CornerRadius}"
           >
                            <ContentPresenter
                     Content="{TemplateBinding BackContent}">
                            </ContentPresenter>
                        </Border>

                        <!-- This the flip button. -->

                        <!--
                        翻转按钮

                        默认控件模板包含一个ToggleButton按钮，如果该按钮使用ToggleButton的默认外观，那么这会使得ToggleButton按钮看似普通按钮，完全具有传统的阴影背景。
                        这对于FlipPanel控件是不合适的

                        尽管可替换ToggleButton中的任何内容，但FlipPanel需要更进一步，他需要去掉标准的背景并根据ToggleButton按钮的状态改变其内部元素的外观。ToggleButton
                        按钮指出了将反转内容的方向(最初当面向前面时指向右边，当面向后面时指向左边)。这使得按钮的目的更加清晰

                        为创建这种效果，需要为ToggleButton设置自定义控件模板。该控件模板能够包含绘制所需箭头的形状元素。在该例中，ToggleButton是使用用于绘制圆的Ellipse
                        元素和用于绘制箭头的Path元素绘制的，这两个元素都放在具有单个单元格的Grip面板中
                        -->
                        <ToggleButton Grid.Row="1" x:Name="FlipButton" RenderTransformOrigin="0.5,0.5"
                     Margin="0,10,0,0" Width="19" Height="19">
                            <ToggleButton.Template>
                                <ControlTemplate>
                                    <Grid>
                                        <Ellipse Stroke="#FFA9A9A9"  Fill="AliceBlue"  />
                                        <Path Data="M1,1.5L4.5,5 8,1.5"
                             Stroke="#FF666666" StrokeThickness="2"
                             HorizontalAlignment="Center" VerticalAlignment="Center">

                                        </Path>
                                    </Grid>
                                </ControlTemplate>
                            </ToggleButton.Template>
                            <!--
                        ToggleButton按钮还需要一个细节——改变箭头指向的RotateTransform对象。当创建状态动画时将使用RotateTransform对象

                            -->

                            <ToggleButton.RenderTransform>

                                <RotateTransform x:Name="FlipButtonTransform" Angle="-90"></RotateTransform>

                            </ToggleButton.RenderTransform>
                        </ToggleButton>



                    </Grid>

                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>