<Window x:Class="WPF_Label.LabelTarget"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:WPF_Label"
        mc:Ignorable="d"
        Title="LabelTarget" Height="180" Width="250">
    <!--
    
    TextBlock使用Text属性
    Label使用Content属性(因为Label内部可以放置任意类型的控件而不仅仅是文本。当然这个内容也可以是一个字符串)
    
    Label 在預設中會有一點 padding，讓文字距離左上角幾個 pixels。這不像 TextBlock 控制項允許你手動指定，在這個簡單的例子中，內容只是一個string，Label實際上會在內部創建一個TextBlock並在其中顯示您的string。

Label控件和TextBlock控件的对比：
TextBlock僅允許您呈現文本字串，而Label還允許您做下列的事情：
設定邊界(border)
渲染其他控件，例如一张图片
通过ContentTemplate属性使用模板化的内容
使用访问键聚焦到相关的控件上
最后一个点是使用Label取代TextBlock控件的其中一个主要原因.当你只是需要渲染简单的文本内容时, 你应该使用TextBlock控件, 因为它更轻量并且在大多数场景下性能比Label好.-->

    <!--Label和访问键(助记符)
在 Windows 和其他系統，這是常見的做法：你可以按下 [Alt] 然後按下你想要訪問的控制項字元，來訪問 dialog 中的控制項。當你按住 [Alt] 時，字元會被高亮顯示。TextBlock 沒有提供這個功能，但 Label 有。所以對於控制標籤， Label 控制項常常是很好的選擇。看看實際的例子：-->

    <!--按下Alt键时会显示如截图所示示例对话框。尝试运行它，按住[Alt]键，然后按N和M.您将看到两个文本框之间的焦点移动方式。

所以，这里有几个新概念。首先，我们通过在字符前放置下划线（_）来定义访问键。它不必是第一个字符，它可以在标签内容中的任何字符之前。通常的做法是使用尚未用作另一个控件的访问键的第一个字符。

我们使用Target属性来连接 Label和指定的控件。我们使用一个标准的WPF绑定，使用ElementName属性，我们将在本教程后面描述所有这些内容。绑定是基于控件的名称，因此，如果更改此名称，还必须记住更改绑定。
    
    如果确实需要在标签中显示下划线，必须添加两个下划线

    
    
    提示：如果需要显示不支持记忆符的内容，可能更愿意使用量级更轻的TextBlock元。与Label控件不同，TextBlock元素还通过他的TextWrapping属性支持换行
    
    -->
    
    <StackPanel Margin="10">
        <Label Content="_Name:" Target="{Binding ElementName=txtName}"/>
        <TextBox Name="txtName"/>
        <Label Content="_Mail:" Target="{Binding ElementName=txtMail}"/>
        <TextBox Name="txtMail"/>
    </StackPanel>
</Window>
