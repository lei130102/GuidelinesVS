<Application x:Class="WPF_CustomControlsClient.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:WPF_CustomControlsClient"
             StartupUri="FlipPanelTest.xaml">
    <Application.Resources>
         
    </Application.Resources>
</Application>

<!--
    自定义元素
    
    在以前的Windows开发框架中，自定义控件扮演着中心角色。但在WPF中，重点已经转移。虽然自定义控件仍是构建能够在应用程序之间共享的
    自定义小组件的有用方法，但当希望加强和定制核心控件时他们不再是必需的

    WPF支持样式、内容控件和模板，因此不再强调自定义控件。这些特性为每位开发人员提供了多种方式来完善和扩展标准的控件，而不用派生新的
    控件类。下面是几种可能的选择：
    a.样式
    可使用样式方便地重用控件属性的组合。甚至可使用触发器应用效果
    b.内容控件
    所有继承自ContentControl类的控件都支持嵌套的内容。使用内容控件，可以快速创建聚集其他元素的复合控件(例如，可将按钮变成图像按钮
    或将列表框变成图像列表)
    c.控件模板
    所有WPF控件都是无外观的，这意味着他们具有硬编码的功能，但他们的外观是通过控件模板单独定义的。使用其他新的控件模板代替默认模板，可重新构建
    基本控件，例如重新构建按钮、复选框、单选按钮甚至窗口
    d.数据模板
    所有派生自ItemsControl的类都支持数据模板，通过数据模板可创建某些数据对象类型的富列表表示。通过恰当的数据模板，可使用许多元素的组合显示每个项，
    这些组合元素可以是文本、图像甚至可以是可编辑控件(都在所选的布局容器中)

    如果可能的话，在决定创建自定义控件或其他类型的自定义元素之前，可以继续使用这些方法。这是因为这些解决方案更简单，更容易实现，并且通常更容易重用

    何时应创建自定义元素？
    当希望微调元素的外观时，自定义元素并非最佳选择，但当希望改变底层的功能时，自定义元素就十分有用了。例如，WPF为TextBox控件和PasswordBox控件使用
    不同的类是有原因的。他们使用不通过的方法处理按键，以不同方式在内部保存他们的数据，以不同的方式与其他控件(如剪切板)进行交互，等等。同样，如果希望
    设计一个具有不同属性、方法和事件集合的控件，就需要自己构建该控件
    
    
    
    
    
    
    理解WPF中的自定义元素
    
    尽管可在任意WPF项目中编写自定义元素，但通常希望在专门的类库程序集(DLL)中放置自定义元素。这样，可在多个WPF应用程序之间共享自定义元素

    为确保具有正确的程序集引用和命名空间导入，当在VisualStudio中创建应用程序时，应当选择Custom Control Library(WPF)项目类型，在类库中可以
    创建任意数量的控件
    (提示：与开发所有类库一样，在同一个VisualStudio解决方案中同时放置类库项目和使用类库的应用程序通常是一个好方法，这样便于同时修改和调试
    这两个项目)

    创建自定义控件的第一步是选择正确的基类进行继承
    下面列出了创建自定义控件时一些常用的基类和他们位于WPF元素中的哪个层次：

    FrameworkElement                               当创建自定义元素时，这是常用的最低级的基类。通常，只有当希望重写OnRender()方法并使用
                                                   System.Windows.Media.DrawingContext从头绘制内容时，才会使用这种方法。在之前的示例中用Visual对象
                                                   构造了一个用户界面，就是这种情况。FrameworkElement类为那些不打算与用户进行交互的元素提供
                                                   了一组基本的属性和事件

    Control                                        当从头开始创建控件时，这是最常用的起点。该类是所有用户交互小组件的基类。Control类添加了用于设置背景、
                                                   前景、字体和内容对齐方式的属性。控件类还为自身设置了Tab顺序(通过IsTabStop属性)，并且引入了鼠标双击
                                                   功能(通过MouseDoubleClick和PreviewMouseDoubleClick事件)。但最重要的是，Control类定义了Template属性，
                                                   为了得到无限的灵活性，该属性允许使用自定义元素树替换其外观

    ContentControl                                 这是能够显示任意单一内容的控件的基类。显示的内容可以是元素或结合使用模板的自定义对象(内容通过Content属性设置
                                                   并且可以通过ContentTemplate属性提供可选的模板)。许多控件都封装了特定的、类型在一定范围内的内容(例如，文本框
                                                   中的文本字符串)。因为这些控件不支持所有元素，所以他们不是内容控件

    UserControl                                    这是可使用设计视图进行配置的内容控件。尽管用户控件和普通的内容控件是不同的，但当希望在多个窗口中快速重用
                                                   用户界面中的不变模块时(而不是创建真正的能在不同应用程序之间转移的独立控件)，通常使用该基类

    ItemsControl或Selector                         ItemsControl是封装项列表的控件的基类，但不支持选择，而Selector类是支持选择的控件的更具体基类。创建自定义
                                                   控件不经常使用这些类，因为ListBox、ListView以及TreeView控件的数据绑定特性提供了很大的灵活性

    Panel                                          该类是具有布局逻辑控件的基类。布局控件能够包含多个子元素，并根据特定的布局语义安排这些子元素。通常，面板提供了
                                                   用于设置子元素的附加属性，配置如何安排子元素

    Decorator                                      封装其他元素的元素的基类，并且提供了一种图形效果或特定的功能。两个明显的例子是Border和Viewbox，其中Border
                                                   控件在元素的周围绘制线条，Viewbox控件使用变换动态缩放其内容。其他装饰元素包括为普通控件(如按钮)提供熟悉边框
                                                   和背景色的修饰类

    特殊控件类                                      如果希望改进现有控件，可直接继承该控件。例如，可创建具有内置验证逻辑的TextBox控件。然而，在采取这一步之前，应当
                                                   首先分析是否可通过事件处理代码或单独的组件达到同一目的。这两种方法都可使自定义逻辑和控件相分离，从而可在其他控件中
                                                   重用


    
    
    
    DispatcherObject(抽象类)
            |
    DependencyObject
            |
          Visual(抽象类)
            |
         UIElement
            |
       FrameworkElement
            |
    +——————————————————————————————————————————————————————————————————————————————————————+
    |                              |                          |                            |
    Shape(抽象类)               Control                     Panel(抽象类)                Decorator
                                   |
                     ContentControl  ItemsControl
                           |
                      UserControl

    注意：尽管可创建非控件的自定义元素，但在WPF中创建的大部分自定义元素都是控件——也就是说，他们能够接收焦点，并能与用户的按键操作和鼠标操作进行交互。所以在
    WPF开发领域，术语“自定义元素”和“自定义控件”有时互换使用
    
    
    -->
